const DIRECTION_VECTORS=[{dRow:0,dCol:-1},{dRow:-1,dCol:-1},{dRow:-1,dCol:0},{dRow:-1,dCol:1},{dRow:0,dCol:1},{dRow:1,dCol:1},{dRow:1,dCol:0},{dRow:1,dCol:-1}];function positionToBit(o,n){return 1n<<BigInt(o*8+n)}function getFlippedDisks(o,n,t,c){const l=c?o:n,r=c?n:o,m=positionToBit(t.row,t.col);if((l|r)&m)return 0n;let s=0n;for(const{dRow:e,dCol:f}of DIRECTION_VECTORS){let i=t.row+e,u=t.col+f,p=0n,x=!1;for(;i>=0&&i<8&&u>=0&&u<8;){const C=positionToBit(i,u);if((C&r)!==0n)p|=C,x=!0;else if((C&l)!==0n){x&&(s|=p);break}else break;i+=e,u+=f}}return s}function getValidMovesBitboard(o,n,t){const r=~((t?o:n)|(t?n:o))&0xFFFFFFFFFFFFFFFFn;let m=[];for(let s=0;s<8;s++)for(let e=0;e<8;e++){const f=positionToBit(s,e);if(r&f){const i=getFlippedDisks(o,n,{row:s,col:e},t);i!==0n&&m.push({row:s,col:e,flipped:i})}}return m}function applyMoveBitboard(o,n,t,c,l){const r=positionToBit(t.row,t.col);return l?{black:o|r|c,white:n&~c}:{black:o&~c,white:n|r|c}}function minimaxBitboard(o,n,t,c,l=-1/0,r=1/0){if(t<=0)return evaluateBitboard(o,n);const m=!c,s=getValidMovesBitboard(o,n,m);if(s.sort((e,f)=>moveWeightBitboard(f)-moveWeightBitboard(e)),s.length===0)return getValidMovesBitboard(o,n,!m).length===0?finalEvaluationBitboard(o,n):minimaxBitboard(o,n,t-1,!c,l,r);if(c){let e=-1/0;for(const f of s){const i=applyMoveBitboard(o,n,f,f.flipped,m),u=minimaxBitboard(i.black,i.white,t-1,!1,l,r);if(e=Math.max(e,u),l=Math.max(l,u),r<=l)break}return e}else{let e=1/0;for(const f of s){const i=applyMoveBitboard(o,n,f,f.flipped,m),u=minimaxBitboard(i.black,i.white,t-1,!0,l,r);if(e=Math.min(e,u),r=Math.min(r,u),r<=l)break}return e}}function moveWeightBitboard(o){const n=o.row,t=o.col;return n===0&&t===0||n===7&&t===0||n===0&&t===7||n===7&&t===7?1e3:n===2&&t===0||n===5&&t===0||n===0&&t===2||n===7&&t===2||n===0&&t===5||n===7&&t===5||n===2&&t===7||n===5&&t===7?900:n===3&&t===0||n===4&&t===0||n===0&&t===3||n===7&&t===3||n===0&&t===4||n===7&&t===4||n===3&&t===7||n===4&&t===7?800:n===2&&t===2||n===2&&t===5||n===5&&t===2||n===5&&t===5?700:n===2&&t===3||n===2&&t===4||n===3&&t===2||n===4&&t===2||n===5&&t===3||n===5&&t===4||n===3&&t===5||n===4&&t===5?600:n===2&&t===1||n===3&&t===1||n===4&&t===1||n===5&&t===1||n===1&&t===2||n===6&&t===2||n===1&&t===3||n===6&&t===3||n===1&&t===4||n===6&&t===4||n===1&&t===5||n===6&&t===5||n===2&&t===6||n===3&&t===6||n===4&&t===6||n===5&&t===6?500:n===1&&t===0||n===6&&t===0||n===0&&t===1||n===7&&t===1||n===0&&t===6||n===7&&t===6||n===1&&t===7||n===6&&t===7?400:n===1&&t===1||n===6&&t===1||n===1&&t===6||n===6&&t===6?300:0}function adjustSearchDepth(o,n){o<n*300?minimax_depth++:o>n*600&&(minimax_depth--,o>n*800&&minimax_depth--),minimax_depth>n&&(minimax_depth=n-1),minimax_depth<0&&(minimax_depth=0)}function countBits(o){let n=0n,t=o;for(;t;)n++,t&=t-1n;return Number(n)}function finalEvaluationBitboard(o,n){const t=countBits(o);return(countBits(n)-t)*1e3}function evaluateBitboard(o,n){let t=0,c=0;const l=countBits(o),r=countBits(n),s=(l+r)/64,e=s*2+.1;t+=l*e,c+=r*e;const f=countBits(o&CORNER_MASK),i=countBits(n&CORNER_MASK);t+=f*cornerWeight,c+=i*cornerWeight;const u=countBits(o&EDGE_MASK),p=countBits(n&EDGE_MASK);t+=u*edgeWeight,c+=p*edgeWeight;const x=Math.max(0,1-s*1.1),C=[{corner:0x0000000000000001n,xc:0x0000000000000302n},{corner:0x0000000000000080n,xc:0x000000000000C040n},{corner:0x0100000000000000n,xc:0x0203000000000000n},{corner:0x8000000000000000n,xc:0x40C0000000000000n}];for(const{corner:g,xc:w}of C)(o&g)===0n&&(n&g)===0n&&(t-=countBits(o&w)*xcCellPenalty*x,c-=countBits(n&w)*xcCellPenalty*x);if(s<.7){const g=(1-s)*mobilityWeight,w=getValidMovesBitboard(o,n,!0).length,y=getValidMovesBitboard(o,n,!1).length;t+=w*g,c+=y*g}return aiLevel>1?aiLevel===6?t-c:c-t:r-l}const CORNER_MASK=0x8100000000000081n,EDGE_MASK=0x7E8181818181817En;let aiLevel=5,minimax_depth=3,mobilityWeight=.1,cornerWeight=30,xcCellPenalty=7,edgeWeight=5;onmessage=o=>{let n=[];try{const[t,c,l]=o.data;aiLevel=l,edgeWeight=aiLevel>3?5:0,cornerWeight=aiLevel>5?30:10,mobilityWeight=aiLevel>7?.3:0,xcCellPenalty=aiLevel>8?7:0,minimax_depth=c;const r=getValidMovesBitboard(t.black,t.white,!1),m=performance.now();let s=-1/0;for(let e=0;e<r.length;e++){const f=r[e],i=applyMoveBitboard(t.black,t.white,f,f.flipped,!1),u=minimaxBitboard(i.black,i.white,minimax_depth,!1,-1/0,1/0);if(e===Math.floor(r.length/2)){const p=performance.now();adjustSearchDepth((p-m)*r.length,aiLevel)}u>s&&(s=u,n=[f.row,f.col])}}catch(t){n=[t,o.data]}n[2]=minimax_depth,postMessage(n)};
